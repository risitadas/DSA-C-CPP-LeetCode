/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* balanceBST(TreeNode* root)
    {

        vector<int> nums;
        inorder(root, nums);
        return build(nums, 0, nums.size()-1);


        
    }

    void inorder(TreeNode* root, vector<int>& nums)
    {
        if(root == nullptr)
        {
            return;

        }

        inorder(root->left, nums);
        nums.push_back(root->val);
        inorder(root->right, nums);



    }

    TreeNode* build(const vector<int>& nums, int left, int right)
    {
        if(left > right)
        {
            return nullptr;

        }

        int mid = (left+right)/2;
        return new TreeNode(nums[mid], build(nums, left, mid-1) , build(nums, mid+1, right));

    }
};
